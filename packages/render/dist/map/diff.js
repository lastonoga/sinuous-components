"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diff = diff;

function diff(parent, a, b, keyExpr, get, before) {
  var aIdx = new Map();
  var bIdx = new Map();
  var i;
  var j; // Create a mapping from keys to their position in the old list

  for (i = 0; i < a.length; i++) {
    var key = keyExpr(a[i], i);
    aIdx.set(key, i);
  } // Create a mapping from keys to their position in the new list


  for (i = 0; i < b.length; i++) {
    var _key = keyExpr(b[i], i);

    bIdx.set(_key, i);
  } // console.warn(aIdx, bIdx);


  for (i = j = 0; i !== a.length || j !== b.length;) {
    var aElm = a[i],
        bElm = b[j];

    if (aElm === null) {
      // This is a element that has been moved to earlier in the list
      i++;
    } else if (b.length <= j) {
      // No more elements in new, this is a delete
      parent.removeChild(get(a[i], i, -1));
      i++;
    } else if (a.length <= i) {
      // No more elements in old, this is an addition
      parent.insertBefore(get(bElm, j, 1), get(a[i], i, 0) || before);
      j++;
    } else if (aElm === bElm) {
      // No difference, we move on
      i++;
      j++;
    } else {
      // Look for the current element at this location in the new list
      // This gives us the idx of where this element should be
      var curElmInNew = bIdx.get(aElm); // Look for the the wanted elment at this location in the old list
      // This gives us the idx of where the wanted element is now

      var wantedElmInOld = aIdx.get(bElm);

      if (curElmInNew === undefined) {
        // Current element is not in new list, it has been removed
        parent.removeChild(get(a[i], i, -1));
        i++;
      } else if (wantedElmInOld === undefined) {
        // New element is not in old list, it has been added
        parent.insertBefore(get(bElm, j, 1), get(a[i], i, 0) || before);
        j++;
      } else {
        // Element is in both lists, it has been moved
        // console.log('move', a[i], 'from', wantedElmInOld, 'to', i)
        parent.insertBefore(get(a[wantedElmInOld], wantedElmInOld, 1), get(a[i], 0) || before);
        a[wantedElmInOld] = null;
        if (wantedElmInOld > i + 1) i++;
        j++;
      }
    }
  }

  return b;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXAvZGlmZi5qcyJdLCJuYW1lcyI6WyJkaWZmIiwicGFyZW50IiwiYSIsImIiLCJrZXlFeHByIiwiZ2V0IiwiYmVmb3JlIiwiYUlkeCIsIk1hcCIsImJJZHgiLCJpIiwiaiIsImxlbmd0aCIsImtleSIsInNldCIsImFFbG0iLCJiRWxtIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJjdXJFbG1Jbk5ldyIsIndhbnRlZEVsbUluT2xkIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU8sU0FBU0EsSUFBVCxDQUFjQyxNQUFkLEVBQXNCQyxDQUF0QixFQUF5QkMsQ0FBekIsRUFBNEJDLE9BQTVCLEVBQXFDQyxHQUFyQyxFQUEwQ0MsTUFBMUMsRUFDUDtBQUNDLE1BQU1DLElBQUksR0FBRyxJQUFJQyxHQUFKLEVBQWI7QUFDQSxNQUFNQyxJQUFJLEdBQUcsSUFBSUQsR0FBSixFQUFiO0FBQ0EsTUFBSUUsQ0FBSjtBQUNBLE1BQUlDLENBQUosQ0FKRCxDQU1DOztBQUNBLE9BQUtELENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR1IsQ0FBQyxDQUFDVSxNQUFsQixFQUEwQkYsQ0FBQyxFQUEzQixFQUErQjtBQUM5QixRQUFJRyxHQUFHLEdBQUdULE9BQU8sQ0FBQ0YsQ0FBQyxDQUFDUSxDQUFELENBQUYsRUFBT0EsQ0FBUCxDQUFqQjtBQUNBSCxJQUFBQSxJQUFJLENBQUNPLEdBQUwsQ0FBU0QsR0FBVCxFQUFjSCxDQUFkO0FBQ0EsR0FWRixDQVlDOzs7QUFDQSxPQUFLQSxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdQLENBQUMsQ0FBQ1MsTUFBbEIsRUFBMEJGLENBQUMsRUFBM0IsRUFBK0I7QUFDOUIsUUFBSUcsSUFBRyxHQUFHVCxPQUFPLENBQUNELENBQUMsQ0FBQ08sQ0FBRCxDQUFGLEVBQU9BLENBQVAsQ0FBakI7O0FBQ0FELElBQUFBLElBQUksQ0FBQ0ssR0FBTCxDQUFTRCxJQUFULEVBQWNILENBQWQ7QUFDQSxHQWhCRixDQWtCQzs7O0FBRUEsT0FBS0EsQ0FBQyxHQUFHQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkQsQ0FBQyxLQUFLUixDQUFDLENBQUNVLE1BQVIsSUFBa0JELENBQUMsS0FBS1IsQ0FBQyxDQUFDUyxNQUExQyxHQUFtRDtBQUNsRCxRQUFJRyxJQUFJLEdBQUdiLENBQUMsQ0FBQ1EsQ0FBRCxDQUFaO0FBQUEsUUFDQ00sSUFBSSxHQUFHYixDQUFDLENBQUNRLENBQUQsQ0FEVDs7QUFFQSxRQUFJSSxJQUFJLEtBQUssSUFBYixFQUFtQjtBQUNsQjtBQUNBTCxNQUFBQSxDQUFDO0FBQ0QsS0FIRCxNQUdPLElBQUlQLENBQUMsQ0FBQ1MsTUFBRixJQUFZRCxDQUFoQixFQUFtQjtBQUN6QjtBQUNBVixNQUFBQSxNQUFNLENBQUNnQixXQUFQLENBQW1CWixHQUFHLENBQUNILENBQUMsQ0FBQ1EsQ0FBRCxDQUFGLEVBQU9BLENBQVAsRUFBVSxDQUFDLENBQVgsQ0FBdEI7QUFDQUEsTUFBQUEsQ0FBQztBQUNELEtBSk0sTUFJQSxJQUFJUixDQUFDLENBQUNVLE1BQUYsSUFBWUYsQ0FBaEIsRUFBbUI7QUFDekI7QUFDQVQsTUFBQUEsTUFBTSxDQUFDaUIsWUFBUCxDQUFvQmIsR0FBRyxDQUFDVyxJQUFELEVBQU9MLENBQVAsRUFBVSxDQUFWLENBQXZCLEVBQXFDTixHQUFHLENBQUNILENBQUMsQ0FBQ1EsQ0FBRCxDQUFGLEVBQU9BLENBQVAsRUFBVSxDQUFWLENBQUgsSUFBbUJKLE1BQXhEO0FBQ0FLLE1BQUFBLENBQUM7QUFDRCxLQUpNLE1BSUEsSUFBSUksSUFBSSxLQUFLQyxJQUFiLEVBQW1CO0FBQ3pCO0FBQ0FOLE1BQUFBLENBQUM7QUFDREMsTUFBQUEsQ0FBQztBQUNELEtBSk0sTUFJQTtBQUNOO0FBQ0E7QUFDQSxVQUFJUSxXQUFXLEdBQUdWLElBQUksQ0FBQ0osR0FBTCxDQUFTVSxJQUFULENBQWxCLENBSE0sQ0FJTjtBQUNBOztBQUNBLFVBQUlLLGNBQWMsR0FBR2IsSUFBSSxDQUFDRixHQUFMLENBQVNXLElBQVQsQ0FBckI7O0FBQ0EsVUFBSUcsV0FBVyxLQUFLRSxTQUFwQixFQUErQjtBQUM5QjtBQUNBcEIsUUFBQUEsTUFBTSxDQUFDZ0IsV0FBUCxDQUFtQlosR0FBRyxDQUFDSCxDQUFDLENBQUNRLENBQUQsQ0FBRixFQUFPQSxDQUFQLEVBQVUsQ0FBQyxDQUFYLENBQXRCO0FBQ0FBLFFBQUFBLENBQUM7QUFDRCxPQUpELE1BSU8sSUFBSVUsY0FBYyxLQUFLQyxTQUF2QixFQUFrQztBQUN4QztBQUNBcEIsUUFBQUEsTUFBTSxDQUFDaUIsWUFBUCxDQUNDYixHQUFHLENBQUNXLElBQUQsRUFBT0wsQ0FBUCxFQUFVLENBQVYsQ0FESixFQUVDTixHQUFHLENBQUNILENBQUMsQ0FBQ1EsQ0FBRCxDQUFGLEVBQU9BLENBQVAsRUFBVSxDQUFWLENBQUgsSUFBbUJKLE1BRnBCO0FBSUFLLFFBQUFBLENBQUM7QUFDRCxPQVBNLE1BT0E7QUFDTjtBQUNBO0FBQ0FWLFFBQUFBLE1BQU0sQ0FBQ2lCLFlBQVAsQ0FDQ2IsR0FBRyxDQUFDSCxDQUFDLENBQUNrQixjQUFELENBQUYsRUFBb0JBLGNBQXBCLEVBQW9DLENBQXBDLENBREosRUFFQ2YsR0FBRyxDQUFDSCxDQUFDLENBQUNRLENBQUQsQ0FBRixFQUFPLENBQVAsQ0FBSCxJQUFnQkosTUFGakI7QUFJQUosUUFBQUEsQ0FBQyxDQUFDa0IsY0FBRCxDQUFELEdBQW9CLElBQXBCO0FBQ0EsWUFBSUEsY0FBYyxHQUFHVixDQUFDLEdBQUcsQ0FBekIsRUFBNEJBLENBQUM7QUFDN0JDLFFBQUFBLENBQUM7QUFDRDtBQUNEO0FBQ0Q7O0FBRUQsU0FBT1IsQ0FBUDtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGRpZmYocGFyZW50LCBhLCBiLCBrZXlFeHByLCBnZXQsIGJlZm9yZSlcbntcblx0Y29uc3QgYUlkeCA9IG5ldyBNYXAoKTtcblx0Y29uc3QgYklkeCA9IG5ldyBNYXAoKTtcblx0bGV0IGk7XG5cdGxldCBqO1xuXG5cdC8vIENyZWF0ZSBhIG1hcHBpbmcgZnJvbSBrZXlzIHRvIHRoZWlyIHBvc2l0aW9uIGluIHRoZSBvbGQgbGlzdFxuXHRmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuXHRcdGxldCBrZXkgPSBrZXlFeHByKGFbaV0sIGkpO1xuXHRcdGFJZHguc2V0KGtleSwgaSk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSBtYXBwaW5nIGZyb20ga2V5cyB0byB0aGVpciBwb3NpdGlvbiBpbiB0aGUgbmV3IGxpc3Rcblx0Zm9yIChpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcblx0XHRsZXQga2V5ID0ga2V5RXhwcihiW2ldLCBpKTtcblx0XHRiSWR4LnNldChrZXksIGkpO1xuXHR9XG5cblx0Ly8gY29uc29sZS53YXJuKGFJZHgsIGJJZHgpO1xuXG5cdGZvciAoaSA9IGogPSAwOyBpICE9PSBhLmxlbmd0aCB8fCBqICE9PSBiLmxlbmd0aDspIHtcblx0XHR2YXIgYUVsbSA9IGFbaV0sXG5cdFx0XHRiRWxtID0gYltqXTtcblx0XHRpZiAoYUVsbSA9PT0gbnVsbCkge1xuXHRcdFx0Ly8gVGhpcyBpcyBhIGVsZW1lbnQgdGhhdCBoYXMgYmVlbiBtb3ZlZCB0byBlYXJsaWVyIGluIHRoZSBsaXN0XG5cdFx0XHRpKys7XG5cdFx0fSBlbHNlIGlmIChiLmxlbmd0aCA8PSBqKSB7XG5cdFx0XHQvLyBObyBtb3JlIGVsZW1lbnRzIGluIG5ldywgdGhpcyBpcyBhIGRlbGV0ZVxuXHRcdFx0cGFyZW50LnJlbW92ZUNoaWxkKGdldChhW2ldLCBpLCAtMSkpO1xuXHRcdFx0aSsrO1xuXHRcdH0gZWxzZSBpZiAoYS5sZW5ndGggPD0gaSkge1xuXHRcdFx0Ly8gTm8gbW9yZSBlbGVtZW50cyBpbiBvbGQsIHRoaXMgaXMgYW4gYWRkaXRpb25cblx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUoZ2V0KGJFbG0sIGosIDEpLCBnZXQoYVtpXSwgaSwgMCkgfHwgYmVmb3JlKTtcblx0XHRcdGorKztcblx0XHR9IGVsc2UgaWYgKGFFbG0gPT09IGJFbG0pIHtcblx0XHRcdC8vIE5vIGRpZmZlcmVuY2UsIHdlIG1vdmUgb25cblx0XHRcdGkrKztcblx0XHRcdGorKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gTG9vayBmb3IgdGhlIGN1cnJlbnQgZWxlbWVudCBhdCB0aGlzIGxvY2F0aW9uIGluIHRoZSBuZXcgbGlzdFxuXHRcdFx0Ly8gVGhpcyBnaXZlcyB1cyB0aGUgaWR4IG9mIHdoZXJlIHRoaXMgZWxlbWVudCBzaG91bGQgYmVcblx0XHRcdHZhciBjdXJFbG1Jbk5ldyA9IGJJZHguZ2V0KGFFbG0pO1xuXHRcdFx0Ly8gTG9vayBmb3IgdGhlIHRoZSB3YW50ZWQgZWxtZW50IGF0IHRoaXMgbG9jYXRpb24gaW4gdGhlIG9sZCBsaXN0XG5cdFx0XHQvLyBUaGlzIGdpdmVzIHVzIHRoZSBpZHggb2Ygd2hlcmUgdGhlIHdhbnRlZCBlbGVtZW50IGlzIG5vd1xuXHRcdFx0dmFyIHdhbnRlZEVsbUluT2xkID0gYUlkeC5nZXQoYkVsbSk7XG5cdFx0XHRpZiAoY3VyRWxtSW5OZXcgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHQvLyBDdXJyZW50IGVsZW1lbnQgaXMgbm90IGluIG5ldyBsaXN0LCBpdCBoYXMgYmVlbiByZW1vdmVkXG5cdFx0XHRcdHBhcmVudC5yZW1vdmVDaGlsZChnZXQoYVtpXSwgaSwgLTEpKTtcblx0XHRcdFx0aSsrO1xuXHRcdFx0fSBlbHNlIGlmICh3YW50ZWRFbG1Jbk9sZCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdC8vIE5ldyBlbGVtZW50IGlzIG5vdCBpbiBvbGQgbGlzdCwgaXQgaGFzIGJlZW4gYWRkZWRcblx0XHRcdFx0cGFyZW50Lmluc2VydEJlZm9yZShcblx0XHRcdFx0XHRnZXQoYkVsbSwgaiwgMSksXG5cdFx0XHRcdFx0Z2V0KGFbaV0sIGksIDApIHx8IGJlZm9yZVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRqKys7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBFbGVtZW50IGlzIGluIGJvdGggbGlzdHMsIGl0IGhhcyBiZWVuIG1vdmVkXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKCdtb3ZlJywgYVtpXSwgJ2Zyb20nLCB3YW50ZWRFbG1Jbk9sZCwgJ3RvJywgaSlcblx0XHRcdFx0cGFyZW50Lmluc2VydEJlZm9yZShcblx0XHRcdFx0XHRnZXQoYVt3YW50ZWRFbG1Jbk9sZF0sIHdhbnRlZEVsbUluT2xkLCAxKSxcblx0XHRcdFx0XHRnZXQoYVtpXSwgMCkgfHwgYmVmb3JlXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGFbd2FudGVkRWxtSW5PbGRdID0gbnVsbDtcblx0XHRcdFx0aWYgKHdhbnRlZEVsbUluT2xkID4gaSArIDEpIGkrKztcblx0XHRcdFx0aisrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBiO1xufVxuIl19