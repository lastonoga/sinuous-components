"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prepareOptionKey = prepareOptionKey;
exports.handleAttrsValue = handleAttrsValue;
exports.parseAttrs = parseAttrs;
exports.parseOptionKey = parseOptionKey;
exports.parseOptionValue = parseOptionValue;

var _expression = require("./expression");

var AttrsMap = {
  'style': 'staticStyle',
  'class': 'staticClass',
  ':style': 'dynamicStyle',
  ':class': 'dynamicClass'
};
var HTMLAttributes = ['id', 'name', 'value', 'placeholder'];
/**
 * There are some type of expressions (javascript code)
 * 1. @click="expr" -> _methods.submitForm();
 * 2. :style="expr" -> ['test', _state.some, _computed.some]  ||  ['test', _data.paddingTop]
 * 3. :class="expr" -> { is-loading: _state.loading }  ||  { is-red: _data.red }
 * 4. v-if="expr" -> _data.type === 'type'  ||  _state.visible === true
 *
 * In render function should be 
 * 1. _methods.submitForm();
 * 2. style(['test', _state.some(), _computed.some() ])  ||  ['test', _data.paddingTop]  SHOULD NOT BE CALLED BECAUSE REACTIVE
 * 3. 
 * 4.  _data.type  ||  () => { return _state.visible() } OR _state.visible
 * 
 * @return {[type]}         [description]
 */

function parseOptionValue(context, key, value) {
  var statefull = false;
  var keepObservation = false;
  var isExpression = false;

  if (key[0] === '$') {
    return {
      value: value,
      statefull: statefull
    };
  }

  if (key[0] === '@') {
    isExpression = true;
    statefull = true;
  }

  if (key[0] === ':') {
    isExpression = true;
  }

  if (typeof value === 'object') {
    keepObservation = true;
  }

  if (key[0] === '_') {
    value = '`' + value.replace(/{{((?:(?!(}})).)+)}}/g, '${$1}') + '`';
    keepObservation = true;
    isExpression = true;
  }

  if (!isExpression) {
    return {
      value: "'" + value + "'",
      statefull: false
    };
  }

  var exp = (0, _expression.expression)(context, value, keepObservation);
  value = exp.value;

  if (!statefull && exp.statefull) {
    statefull = true;
  }

  return {
    value: value,
    statefull: statefull
  };
}

function parseOptionKey(key, value) {
  if (AttrsMap[key]) {
    return AttrsMap[key];
  } else if (key[0] === '@') {
    return key.replace(/@/g, 'on');
  }

  return key;
}

function parseStyles(string) {
  var styles = {};
  var pairs = string.replace(/\s/g, '').split(';');

  for (var i = 0; i < pairs.length; i++) {
    var tmp = pairs[i].split(':');

    if (tmp.length === 2) {
      styles[tmp[0]] = tmp[1];
    }
  }

  return styles;
}

function prepareOptionKey(variable) {
  if (variable.match(/\-/g)) {
    variable = "'" + variable + "'";
  }

  return variable;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * [dynamicArgAttribute description]
 * @type {RegExp}
 */


var dynamicArgAttribute = /^(\@|\:)/g;
var eventArgAttribute = /^\@/g;
/**
 * Keep options while hydration
 * e.g events, static class, props
 * @type {Array}
 */

var isHydrationKeepAttr = makeMap('staticClass, staticStyle, props, on');
var isFunctionAttr = makeMap('key, ref');
var isAttr = makeMap('accept,accept-charset,accesskey,action,align,alt,async,autocomplete,' + 'autofocus,autoplay,autosave,bgcolor,border,buffered,challenge,charset,' + 'checked,cite,class,code,codebase,color,cols,colspan,content,http-equiv,' + 'name,contenteditable,contextmenu,controls,coords,data,datetime,default,' + 'defer,dir,dirname,disabled,download,draggable,dropzone,enctype,method,for,' + 'form,formaction,headers,height,hidden,high,href,hreflang,http-equiv,' + 'icon,id,ismap,itemprop,keytype,kind,label,lang,language,list,loop,low,' + 'manifest,max,maxlength,media,method,GET,POST,min,multiple,email,file,' + 'muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,' + 'preload,radiogroup,readonly,rel,required,reversed,rows,rowspan,sandbox,' + 'scope,scoped,seamless,selected,shape,size,type,text,password,sizes,span,' + 'spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,' + 'target,title,type,usemap,value,width,wrap');
var isNotCallable = makeMap('');

var isEventAttr = function isEventAttr(name) {
  return name.match(eventArgAttribute);
};

var isCSSAttr = function isCSSAttr(name) {
  return name.match(/^\:?(style|class)$/g);
};

var isRenderableAttr = function isRenderableAttr(name) {
  return isAttr(name) || name.indexOf('data-') === 0 || name.indexOf('aria-') === 0;
};

var isArgNotHydratable = function isArgNotHydratable(type, arg) {
  if (type === null) {
    type = arg;
  }

  return !isHydrationKeepAttr(type);
};

var normalizeValue = function normalizeValue(value) {
  if (value === '') {
    value = true;
  }

  if (typeof value !== 'boolean') {
    value = "\"" + value + "\"";
  }

  return value;
};

function handleAttrsValue(context, value, shouldBeCallable) {
  if (shouldBeCallable === void 0) {
    shouldBeCallable = true;
  }

  var statefull = false;
  var exp = (0, _expression.expression)(context, value, shouldBeCallable);
  value = exp.value;

  if (!statefull && exp.statefull) {
    statefull = true;
  }

  return {
    value: value,
    statefull: statefull
  };
}

function genOptions(options) {
  var result = '';

  for (var key in options) {
    var value = options[key];

    if (typeof options[key] === 'object') {
      value = genOptions(value);

      if (value === null) {
        continue;
      }

      result += "'" + key + "': { \n " + value + " \n},\n";
    } else {
      if (value == '') {
        continue;
      }

      result += "'" + key + "': " + value + ",\n";
    }
  }

  if (result == '') {
    return null;
  }

  return result;
}

function parseAttrs(context, attrs, hydrate) {
  if (hydrate === void 0) {
    hydrate = false;
  }

  var shouldOptionsHydrate = false;
  var options = {
    staticClass: '',
    staticStyle: {},
    class: [],
    style: [],
    attrs: {},
    on: {},
    domProps: {},
    props: {}
  };

  for (var key in attrs) {
    var arg = key.replace(dynamicArgAttribute, '');
    var attrValue = attrs[key];

    if (arg.match(/^v\-/g)) {
      continue;
    }

    if (key.match(dynamicArgAttribute)) {
      var _handleAttrsValue = handleAttrsValue(context, attrValue, !isNotCallable(arg)),
          value = _handleAttrsValue.value,
          statefull = _handleAttrsValue.statefull;

      var type = false;

      if (isEventAttr(key)) {
        type = 'on';
        statefull = true;
      } else if (isFunctionAttr(arg)) {
        type = null;
      } else {
        if (isCSSAttr(key)) {
          type = null;
          statefull = true;
        } else if (isRenderableAttr(arg)) {
          type = 'attrs';
        } else {
          type = 'props';
        }
      }

      if (statefull) {
        shouldOptionsHydrate = true;
      }

      if (type === false) {
        continue;
      }

      if (hydrate && !statefull && isArgNotHydratable(type, arg)) {
        continue;
      }

      if (type === null) {
        options[arg] = value;
      } else {
        options[type][arg] = value;
      }
    } else {
      var _value = attrValue;
      var normalizedValue = null;
      var _type = false;

      if (arg === 'class') {
        arg = 'staticClass';
        _type = null;
        normalizedValue = normalizeValue(_value);
      } else if (arg === 'style') {
        arg = 'staticStyle';
        _type = null;
        normalizedValue = {};
        _value = _value.split(';');

        for (var i = 0; i < _value.length; i++) {
          var tmp = _value[i].split(':').map(function (item) {
            return item.trim();
          });

          if (tmp.length === 2) {
            normalizedValue[tmp[0]] = normalizeValue(tmp[1]);
          }
        }
      } else if (isFunctionAttr(arg)) {
        throw new Error("Attribute " + arg + " should by dynamic");
      } else if (isRenderableAttr(arg)) {
        _type = 'attrs';
        normalizedValue = normalizeValue(_value);
      } else {
        _type = 'props';
        normalizedValue = normalizeValue(_value);
      }

      if (_type === false) {
        continue;
      }

      if (hydrate && isArgNotHydratable(_type, arg)) {
        continue;
      }

      if (_type === null) {
        options[arg] = normalizedValue;
      } else {
        options[_type][arg] = normalizedValue;
      }
    } // Is expression inside

  } // if(hydrate) {
  // 	if(options.class.length === 0) {
  // 		delete options.staticClass;
  // 	}
  // 	if(options.style.length === 0) {
  // 		delete options.staticStyle;
  // 	}
  // }
  // console.log(options);
  // console.log(genOptions(options));
  // console.log(shouldOptionsHydrate);


  options = genOptions(options);
  return {
    options: options === null ? '' : options,
    shouldOptionsHydrate: shouldOptionsHydrate
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,