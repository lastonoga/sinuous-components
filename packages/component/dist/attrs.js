"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleClassObject = handleClassObject;
exports.classes = classes;
exports.handleStylesObject = handleStylesObject;
exports.styles = styles;

var _value = _interopRequireDefault(require("./value"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function camelToProp(s) {
  return s.replace(/\.?([A-Z]+)/g, function (x, y) {
    return "-" + y.toLowerCase();
  }).replace(/^-/, '');
}

function onlyUnique(value, index, self) {
  return self.indexOf(value) === index;
}

function handleClassObject(obj) {
  var classes = [];

  for (var key in obj) {
    if ((0, _value.default)(obj[key])) {
      classes.push(key);
    }
  }

  return classes;
}

function classes(staticClasses, dynamic) {
  var _arguments = arguments;

  if (staticClasses === void 0) {
    staticClasses = [];
  }

  if (dynamic === void 0) {
    dynamic = {};
  }

  return function () {
    var classes = [];

    for (var i = 0; i < _arguments.length; i++) {
      var arg = _arguments[i];

      if (Array.isArray(arg)) {
        for (var j = 0; j < arg.length; j++) {
          classes.push((0, _value.default)(arg[j]));
        }
      } else if (typeof arg === 'object') {
        classes = classes.concat(handleClassObject(arg));
      } else if (typeof arg === 'function') {
        classes = classes.concat(handleClassObject((0, _value.default)(arg)));
      } else {
        classes.push(arg);
      }
    }

    classes = classes.filter(function (v, i, a) {
      return a.indexOf(v) === i;
    });
    return classes.join(' ');
  };
}

function handleStylesObject(styles, obj) {
  for (var key in obj) {
    var val = (0, _value.default)(obj[key]);

    if (val !== null) {
      styles[camelToProp(key)] = val;
    }
  }

  return styles;
}

function styles() {
  var _arguments2 = arguments;
  return function () {
    var styles = {};

    for (var i = 0; i < _arguments2.length; i++) {
      if (typeof _arguments2[i] === 'object') {
        handleStylesObject(styles, _arguments2[i]);
      } else {
        handleStylesObject(styles, (0, _value.default)(_arguments2[i]));
      }
    }

    return styles;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hdHRycy5qcyJdLCJuYW1lcyI6WyJjYW1lbFRvUHJvcCIsInMiLCJyZXBsYWNlIiwieCIsInkiLCJ0b0xvd2VyQ2FzZSIsIm9ubHlVbmlxdWUiLCJ2YWx1ZSIsImluZGV4Iiwic2VsZiIsImluZGV4T2YiLCJoYW5kbGVDbGFzc09iamVjdCIsIm9iaiIsImNsYXNzZXMiLCJrZXkiLCJwdXNoIiwic3RhdGljQ2xhc3NlcyIsImR5bmFtaWMiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJnIiwiQXJyYXkiLCJpc0FycmF5IiwiaiIsImNvbmNhdCIsImZpbHRlciIsInYiLCJhIiwiam9pbiIsImhhbmRsZVN0eWxlc09iamVjdCIsInN0eWxlcyIsInZhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7O0FBR0EsU0FBU0EsV0FBVCxDQUFxQkMsQ0FBckIsRUFDQTtBQUNDLFNBQU9BLENBQUMsQ0FDTkMsT0FESyxDQUNHLGNBREgsRUFDbUIsVUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsaUJBQWNBLENBQUMsQ0FBQ0MsV0FBRixFQUFkO0FBQUEsR0FEbkIsRUFFTEgsT0FGSyxDQUVHLElBRkgsRUFFUyxFQUZULENBQVA7QUFHQTs7QUFFRCxTQUFTSSxVQUFULENBQW9CQyxLQUFwQixFQUEyQkMsS0FBM0IsRUFBa0NDLElBQWxDLEVBQXdDO0FBQ3BDLFNBQU9BLElBQUksQ0FBQ0MsT0FBTCxDQUFhSCxLQUFiLE1BQXdCQyxLQUEvQjtBQUNIOztBQUVNLFNBQVNHLGlCQUFULENBQTJCQyxHQUEzQixFQUNQO0FBQ0MsTUFBSUMsT0FBTyxHQUFHLEVBQWQ7O0FBRUEsT0FBSyxJQUFJQyxHQUFULElBQWdCRixHQUFoQixFQUFxQjtBQUNwQixRQUFHLG9CQUFNQSxHQUFHLENBQUNFLEdBQUQsQ0FBVCxDQUFILEVBQW9CO0FBQ25CRCxNQUFBQSxPQUFPLENBQUNFLElBQVIsQ0FBYUQsR0FBYjtBQUNBO0FBQ0Q7O0FBRUQsU0FBT0QsT0FBUDtB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dmFsdWUgZnJvbSAnLi92YWx1ZSc7XG5cblxuZnVuY3Rpb24gY2FtZWxUb1Byb3Aocylcbntcblx0cmV0dXJuIHNcblx0XHQucmVwbGFjZSgvXFwuPyhbQS1aXSspL2csICh4LCB5KSA9PiBgLSR7eS50b0xvd2VyQ2FzZSgpfWApXG5cdFx0LnJlcGxhY2UoL14tLywgJycpO1xufVxuXG5mdW5jdGlvbiBvbmx5VW5pcXVlKHZhbHVlLCBpbmRleCwgc2VsZikgeyBcbiAgICByZXR1cm4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVDbGFzc09iamVjdChvYmopXG57XG5cdGxldCBjbGFzc2VzID0gW107XG5cblx0Zm9yIChsZXQga2V5IGluIG9iaikge1xuXHRcdGlmKHZhbHVlKG9ialtrZXldKSkge1xuXHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNsYXNzZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGFzc2VzKHN0YXRpY0NsYXNzZXMgPSBbXSwgZHluYW1pYyA9IHt9KVxue1xuXHRyZXR1cm4gKCkgPT4ge1xuXHRcdGxldCBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0bGV0IGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdFxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgYXJnLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKHZhbHVlKGFyZ1tqXSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYodHlwZW9mIGFyZyA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Y2xhc3NlcyA9IGNsYXNzZXMuY29uY2F0KFxuXHRcdFx0XHRcdGhhbmRsZUNsYXNzT2JqZWN0KGFyZylcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSBpZih0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdGNsYXNzZXMgPSBjbGFzc2VzLmNvbmNhdChcblx0XHRcdFx0XHRoYW5kbGVDbGFzc09iamVjdCh2YWx1ZShhcmcpKVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXMuZmlsdGVyKCh2LCBpLCBhKSA9PiBhLmluZGV4T2YodikgPT09IGkpO1xuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVTdHlsZXNPYmplY3Qoc3R5bGVzLCBvYmopXG57XG5cdGZvciAobGV0IGtleSBpbiBvYmopIHtcblx0XHRsZXQgdmFsID0gdmFsdWUob2JqW2tleV0pO1xuXHRcdGlmKHZhbCAhPT0gbnVsbCkge1xuXHRcdFx0c3R5bGVzW2NhbWVsVG9Qcm9wKGtleSldID0gdmFsO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZXMoKVxue1xuXHRyZXR1cm4gKCkgPT4ge1xuXHRcdGxldCBzdHlsZXMgPSB7fTtcblx0XHRcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0aGFuZGxlU3R5bGVzT2JqZWN0KHN0eWxlcywgYXJndW1lbnRzW2ldKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlU3R5bGVzT2JqZWN0KHN0eWxlcywgdmFsdWUoYXJndW1lbnRzW2ldKSlcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gc3R5bGVzO1xuXHR9XG59XG4iXX0=